import random
import keyboard
import time
import tic_tac_toe_AI_moves as AI_file
from tic_tac_toe_board_display import show_game
from AI_logic import AI



game_display = []
current_player = None
game_running = None
first_time = None

def initialize_game():
    global game_display
    game_display = [["?"] * 3 for n in range(3)]
    global game_running
    game_running = True
    global current_player
    current_player = "X"
    global first_time
    first_time = True


def input_for_players(position_on_board):
    valid_input_0 = False
    valid_input_1 = False

    while not (valid_input_0 and valid_input_1):
        player_input = (input("Choose row and column: ").upper())
        if player_input[0] == "A":
            valid_input_0 = True
        elif player_input[0] == "B":
            valid_input_0 = True
        elif player_input[0] == "C":
            valid_input_0 = True

        if player_input[1] == "1":
            valid_input_1 = True
        elif player_input[1] == "2":
            valid_input_1 = True
        elif player_input[1] == "3":
            valid_input_1 = True    
        
    player_input_row = player_input[0]
    player_input_column = int(player_input[1])

    if player_input_row == "A":
        player_input_row = 1
    elif player_input_row == "B":
        player_input_row = 2
    elif player_input_row == "C":
        player_input_row = 3

    if position_on_board[player_input_row -1][player_input_column -1] == "?":
        position_on_board[player_input_row -1][player_input_column -1] = current_player
    else:
        print("Place is already taken, choose a different one!")
        change_player()

def check_win_1(board):                                                # Porównuje czy 3 pola są takie same, ale nie są "?"
    if board[0][0] == board[0][1] == board[0][2] and board[0][0] != "?":
        return True
    elif board[1][0] == board[1][1] == board[0][2] and board[1][0] != "?":
        return True
    elif board[2][0] == board[2][1] == board[2][2] and board[2][0] != "?":
        return True
    elif board[0][0] == board[1][0] == board[2][0] and board[0][0] != "?":
        return True
    elif board[0][1] == board[1][1] == board[2][1] and board[0][1] != "?":
        return True
    elif board[0][2] == board[1][2] == board[2][2] and board[0][2] != "?":
        return True
    elif board[0][0] == board[1][1] == board[2][2] and board[0][0] != "?":
        return True
    elif board[0][2] == board[1][1] == board[2][0] and board[0][2] != "?":
        return True
    else:
        return False


def check_tie(board):
    global game_running
    tie_check = False
    for row in range(len(game_display)):     
        for element in range(len(game_display[row])):
            if game_display[row][element] == "?":
                tie_check = True
    if  not tie_check:
        show_game(board)
        print("No winners!")
        game_running = False


def check_if_win(board):
    if check_win_1(board):
        show_game(board)
        print("The winner is " + current_player)
        global game_running
        game_running = False
    else:
        check_tie(board)

def change_player():
    global current_player
    if current_player == "X":
        current_player = "O"
    else:
        current_player = "X"




def AI_2():                                         # Dodatkowo sprawdza, czy ruch daje wygraną
    global game_display
    while current_player == "O":
        print("Computer turn...")
        time.sleep(1)
        is_win = False
        for row in range(len(game_display)):     
            for element in range(len(game_display[row])):
                if game_display[row][element] == "?":
                    game_display[row][element] = "O"
                    if check_win_1(game_display):
                        is_win = True
                        break
            
                    else:
                        game_display[row][element] = "?" 
            if is_win:
                break               
        if is_win:
                break         
        if not is_win:
            position_taken = False
            if not position_taken:
                for row in range(len(game_display)):
                    row = random.randint(0,2)
                    for column in range(len(game_display[row])):
                        column = random.randint(0,2)
                        if game_display[row][column] == "?":
                            game_display[row][column] = current_player
                            position_taken = True
                            break
                        break
                    break
            if position_taken:
                change_player()


def AI_3():
    global game_display
    global first_time
    is_win = False
    is_x_win = False

    while current_player == "O":
        print("Computer turn...")
        time.sleep(1)
        if game_display[4] == "?":
           game_display[4] = "O"
           change_player()
           first_time = False
        elif first_time:
            position = random.randint(0, 8)
            if game_display[position] == "?":
                game_display[position] = "O"
                change_player()
                first_time = False
        else:
            for position in range(0,9):   
                if game_display[position] == "?":
                    game_display[position] = "X"
                    if check_win_1(game_display):
                        game_display[position] = "O"
                        is_x_win = True
                        change_player()
                        break
                    else:
                        game_display[position] = "?"
            if not is_x_win:
                for position in range(0,9):   
                    if game_display[position] == "?":
                        game_display[position] = "O"
                        if check_win_1(game_display):
                            is_win = True
                            change_player()
                            break
                        else:
                            game_display[position] = "?"
                if not is_win:
                    game_display = AI_file.AI_check_moves(board = game_display)
                    change_player()


def game_seq():
    show_game(game_display)
    input_for_players(game_display)
    show_game(game_display)


def game_start():
    player_input = (input("Choose game mode: 1 - player vs player, 2 - player vs AI easy, 3 - player vs AI medium, 4 - AI hard "))
    while game_running:        
        if player_input == "1":
            show_game(game_display)
            input_for_players(game_display)
            check_if_win(game_display)
            change_player()        
        elif player_input == "2":
            game_seq()
            check_if_win(game_display)
            change_player()
            AI(current_player, game_display)
            check_if_win(game_display)
        elif player_input == "3":
            game_seq()
            if check_win_1(game_display):
                check_if_win(game_display)
                break
            change_player()
            AI_2()
            if check_win_1(game_display):
                change_player()
                check_if_win(game_display)
            check_tie(game_display)        
        elif player_input == "4":
            game_seq()
            if check_win_1(game_display):
                check_if_win(game_display)
                break
            check_tie(game_display)
            change_player()
            AI_3()
            if check_win_1(game_display):
                change_player()
                check_if_win(game_display)
            check_tie(game_display)
    print(" THE END")        
    print("Press enter to play or 'q' to exit ")

def main():
    print("Press enter to play or 'q' to exit ")
    new_game = True
    while new_game:
        if keyboard.read_key() == "q":
            print("BYE BYE")
            new_game = False
            
        elif keyboard.is_pressed("\n"):
            input()
            initialize_game()
            game_start()


if __name__ == "__main__":
    main()
